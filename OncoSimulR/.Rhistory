runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("styler")
style_dir()
styler:::style_active_file()
styler::style_dir()
styler::style_dir()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
installed.packages('rsconnect')
rsconnect::setAccountInfo(name='tfgsgv', token='5AEF90D3F1F0B6F37546E408103BE872', secret='cq1/Had1Ev25zD+MraqxY6kP7pZPDYavzyWZ5hAX')
rsconnect::deployApp()
deployApp()
library(rsconnect)
deployApp()
options("repos")
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
runApp()
BiocManager::install("OncoSimulR")
options("repos")
deployApp()
BioConductor::uninstall
remove.packages("OncoSimulR")
remove.packages("Biobase")
remove.packages("BiocFileCache")
remove.packages("BiocGenerics")
remove.packages("BiocIO")
remove.packages("BiocManager")
remove.packages("BiocParallel")
remove.packages("BiocVersion")
remove.packages("biomaRt")
remove.packages("Biostrings")
BiocManager::install("OncoSimulR")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::valid()
BiocManager::install(c(
"cachem", "cli", "DelayedArray", "dplyr", "DT", "htmltools", "httpuv", "igraph", "later", "rlang", "sass", "tibble", "vctrs"
), update = TRUE, ask = FALSE, force = TRUE)
shiny::runApp()
BiocManager::install("OncoSimulR")
shiny::runApp()
.libPaths
.libPaths()
.libPaths("rlang")
install.packages("rlang")
shiny::runApp()
deployApp()
library(periscope)
deployApp()
runApp()
options(repos = BiocManager::repositories())
help("repositories", package = "BiocManager")
options(BiocManager.snapshot = "CRAN")
runApp()
runApp()
deployApp()
fileEncoding="latin1"
deployApp()
runApp()
deployApp()
runApp()
runApp()
deployApp()
runApp()
deployApp()
deployApp()
Y
BiocManager::valid()
BiocManager::install(c(
"cachem", "cli", "DelayedArray", "htmltools", "httpuv", "later", "sass"
), update = TRUE, ask = FALSE, force = TRUE)
deployApp()
installed.packages('rsconnect')
deployApp()
rsconnect::setAccountInfo(name='tfgsgv', token='5AEF90D3F1F0B6F37546E408103BE872', secret='cq1/Had1Ev25zD+MraqxY6kP7pZPDYavzyWZ5hAX')
deployApp()
rsconnect::deployApp()
rsconnect::deployApp(appName="OncoSimulR")
BiocManager::install(c(
"cachem", "cli", "DelayedArray", "htmltools", "httpuv", "later", "sass"
), update = TRUE, ask = FALSE, force = TRUE)
BiocManager::valid()
help("repositories", package = "BiocManager")
options(BiocManager.snapshot = "CRAN")
BiocManager::valid()
rsconnect::deployApp(appName="OncoSimulR")
library(BiocVersion)
library(BiocManager)
library(BiocGenerics)
detach("package:BiocGenerics", unload = TRUE)
detach("package:BiocManager", unload = TRUE)
detach("package:BiocVersion", unload = TRUE)
remove.packages("BiocVersion")
remove.packages("BiocGenerics")
remove.packages("BiocManager")
remove.packages("BiocVersion")
install.packages("BiocManager")
BiocManager::valid()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
BiocManager::valid()
getOption("repos")
getOption("repos")
BiocManager::valid()
help("repositories", package = "BiocManager")
options(BiocManager.snapshot = "CRAN")
BiocManager::valid()
rsconnect::deployApp(appName="OncoSimulR")
Sys.setlocale("LC_CTYPE", "Spanish")
rsconnect::deployApp(appName="OncoSimulR")
Sys.setlocale("LC_CTYPE", "English")
rsconnect::deployApp(appName="OncoSimulR")
help("repositories", package = "BiocManager")
getOption("repos")
options(BiocManager.snapshot = "CRAN")
getOption("repos")
BiocManager::valid()
BiocManager::install(c(
"BiocManager", "broom", "bslib", "cachem", "cli", "curl", "DelayedArray", "htmltools", "httpuv", "igraph", "jsonlite", "later",
"matrixStats", "rmarkdown", "sass", "styler", "testthat", "vctrs"
), update = TRUE, ask = FALSE, force = TRUE)
BiocManager::valid()
getOption("repos")
options(BiocManager.snapshot = "CRAN")
rsconnect::deployApp(appName="OncoSimulR")
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
library(BiocVersion)
library(BiocGenerics)
rsconnect::deployApp(appName="OncoSimulR")
library(BiocManager)
options(repos = BiocManager::repositories())
rsconnect::deployApp(appName="OncoSimulR")
